<?php

require_once FYNX_PUBLIC['system'] . 'libraries/helpers.lib';

class Amadeus
{
    /**
     * The array of amadeus credentials and parameters.
     *
     * @var array
     */
    protected $params = [];

    public function __construct($params = [
        'client_id' => '1h2mCCfRO1Min0gXWb5I67nmrVBAgSJk',
        'client_secret' => 'Y04EES3vzgww3pJi',
        'environment' => 'development',
        'enterprise' => '1',
        'pro_end_pointv1_ent' => 'https://travel.api.amadeus.com/v1/',
        'pro_end_pointv2_ent' => 'https://travel.api.amadeus.com/v2/',
        'pro_end_pointv1' => 'https://api.amadeus.com/v1/',
        'pro_end_pointv2' => 'https://api.amadeus.com/v2/',
        'dev_end_pointv1_ent' => 'https://test.travel.api.amadeus.com/v1/',
        'dev_end_pointv2_ent' => 'https://test.travel.api.amadeus.com/v2/',
        'dev_end_pointv1' => 'https://test.api.amadeus.com/v1/',
        'dev_end_pointv2' => 'https://test.api.amadeus.com/v2/',
    ]) {
        $this->helpers = new Helpers;
        $this->params = $params;
        if (isset($this->params['environment']) && $this->params['environment'] == 'production') {
            if (isset($this->params['enterprise']) && $this->params['enterprise'] == '1') {
                $this->end_pointv1 = $this->params['pro_end_pointv1_ent'];
                $this->end_pointv2 = $this->params['pro_end_pointv2_ent'];
            } else {
                $this->end_pointv1 = $this->params['pro_end_pointv1'];
                $this->end_pointv2 = $this->params['pro_end_pointv2'];
            }
        } else {
            if (isset($this->params['enterprise']) && $this->params['enterprise'] == '1') {
                $this->end_pointv1 = $this->params['dev_end_pointv1_ent'];
                $this->end_pointv2 = $this->params['dev_end_pointv2_ent'];
            } else {
                $this->end_pointv1 = $this->params['dev_end_pointv1'];
                $this->end_pointv2 = $this->params['dev_end_pointv2'];
            }
        }
    }

    /*
    |--------------------------------------------------------------------------
    | Amadeus API Token
    |--------------------------------------------------------------------------
    |
    | This function gets an API Token from Amadeus after providing credentials
    |
     */
    public function get_token_information()
    {
        $headers = [
            "Access-Control-Allow-Origin: *",
            "Content-Type: application/x-www-form-urlencoded",
        ];
        $data = [
            'grant_type' => 'client_credentials',
            'client_id' => $this->params['client_id'],
            'client_secret' => $this->params['client_secret'],
        ];
        $token_data = json_decode($this->helpers->proxy_request($this->end_pointv1 . 'security/oauth2/token', http_build_query($data), 'POST', $headers), true);
        $this->token = isset($token_data['access_token']) ? $token_data['access_token'] : $token_data;
        return $this;

    }

    /*
    |--------------------------------------------------------------------------
    | Amadeus Flight Offers Parameter
    |--------------------------------------------------------------------------
    |
    | This function builds the parameter that would be passed through to search
    | for the Amadeus flight offers. Your flight search form would have to
    | include the following form names for Round-trip, One-way and Multi-city
    | respectively to be posted:
    | type (eg. round-trip, one-way and multi-city), origin, destination,
    | departure_date, return_date (for round-trip), class_trip, adults, children, infants.
    | For Multi-city; orign, destination and departure_date would have a name
    | order as an array like this; origin[], destination[], departure_date[], etc.
    |
     */
    public function build_flight_offers_parameter($post_data)
    {
        if (isset($post_data['type']) && !empty($post_data['type'])) {

            $this->post_data = $post_data;
            unset($post_data);

            // convert departure and return date to datetime
            if ($this->post_data['type'] == 'one-way' || $this->post_data['type'] == 'round-trip') {
                $departureDate = strtoupper(date('Y-m-d', strtotime($this->post_data['departure_date'])));
                $departureTime = strtoupper(date('h:i:s', strtotime($this->post_data['departure_date'])));
                if ($this->post_data['type'] == 'round-trip') {
                    $returnDate = strtoupper(date('Y-m-d', strtotime($this->post_data['return_date'])));
                    $returnTime = strtoupper(date('h:i:s', strtotime($this->post_data['return_date'])));
                }
            }

            // create Amadeus flight route shedule to be searched
            $route_data = [];
            if ($this->post_data['type'] == 'one-way' || $this->post_data['type'] == 'round-trip') {
                array_push($route_data, (object) array(
                    "id" => "1",
                    "originLocationCode" => strtoupper($this->post_data['origin']),
                    "destinationLocationCode" => strtoupper($this->post_data['destination']),
                    "departureDateTimeRange" => array(
                        'date' => $departureDate,
                        'time' => $departureTime,
                    ),
                ));
            }
            if ($this->post_data['type'] == 'round-trip') {
                array_push($route_data, (object) array(
                    "id" => "2",
                    "originLocationCode" => strtoupper($this->post_data['destination']),
                    "destinationLocationCode" => strtoupper($this->post_data['origin']),
                    "departureDateTimeRange" => array(
                        'date' => $returnDate,
                        'time' => $returnTime,
                    ),
                ));
            }
            if ($this->post_data['type'] == 'multi-city') {
                for ($i = 1; $i <= count($this->post_data['origin']); $i++) {
                    array_push($route_data, (object) array(
                        "id" => $i,
                        "originLocationCode" => strtoupper($this->post_data['origin'][$i - 1]),
                        "destinationLocationCode" => strtoupper($this->post_data['destination'][$i - 1]),
                        "departureDateTimeRange" => array(
                            'date' => strtoupper(date('Y-m-d', strtotime($this->post_data['departure_date'][$i - 1]))),
                            'time' => strtoupper(date('h:i:s', strtotime($this->post_data['departure_date'][$i - 1]))),
                        ),
                    ));
                }
            }

            // travelers details
            $travelers_details = [];
            if (isset($this->post_data['adults'])) {
                for ($i = 1; $i < $this->post_data['adults'] + 1; $i++) {
                    array_push($travelers_details, (object) array(
                        "id" => $i,
                        "travelerType" => 'ADULT',
                        "fareOptions" => array('STANDARD'),

                    ));
                }
            }

            if (isset($this->post_data['children']) && $this->post_data['children'] != 0) {
                for ($i = 1; $i < $this->post_data['children'] + 1; $i++) {
                    array_push($travelers_details, (object) array(
                        "id" => $i + $this->post_data['adults'],
                        "travelerType" => 'CHILD',
                        "fareOptions" => array('STANDARD'),

                    ));
                }
            } else {
                $this->post_data['children'] = 0;
            }

            if (isset($this->post_data['infants']) && $this->post_data['infants'] != 0) {
                for ($i = 1; $i < $this->post_data['infants'] + 1; $i++) {
                    array_push($travelers_details, (object) array(
                        "id" => $i + $this->post_data['adults'] + $this->post_data['children'],
                        "travelerType" => 'SEATED_INFANT',
                        "fareOptions" => array('STANDARD'),

                    ));
                }
            } else {
                $this->post_data['infants'] = 0;
            }

            // create Amadeus search data
            $this->dynamic_search_data = array(
                'currencyCode' => 'USD',
                'originDestinations' => $route_data,
                'travelers' => $travelers_details,
                'sources' => array('GDS'),
                'searchCriteria' => (object) array(
                    'maxFlightOffers' => 100,
                    'flightFilters' => (object) array(
                        'cabinRestrictions' => array(
                            (object) array(
                                'cabin' => strtoupper($this->post_data['class_trip']),
                                'coverage' => 'MOST_SEGMENTS',
                                'originDestinationIds' => array('1'),
                            ),
                        ),
                        'carrierRestrictions' => (object) array(
                            'excludedCarrierCodes' => array(
                                'AA',
                                'TP',
                                'AZ',
                            ),
                        ),

                    ),
                ),
            );
        } else {
            $this->dynamic_search_data = [];
        }
        return $this;
    }

    /*
    |--------------------------------------------------------------------------
    | Amadeus Flight Offers Search
    |--------------------------------------------------------------------------
    |
    | This function searches Amadeus GDS server for available flight schedules
    |
     */
    public function get_flight_offers_search()
    {
        if (empty($this->dynamic_search_data) || !isset($this->dynamic_search_data) || !isset($this->post_data['referenceTrackingID'])) {
            $data = array(
                'code' => '32170',
                'subject' => 'Missing Search Data',
                'message' => 'Data Search parameter is Missing!',
            );
            return $data;
        }
        if (isset($_SESSION['booking_successful']) && $this->post_data['referenceTrackingID'] == $_SESSION['booking_successful']) {
            $data = array(
                'code' => '419',
                'subject' => 'Duplicated Transaction',
                'message' => 'Reference ID already Exist!',
            );
            return $data;
        }
        if (isset($this->token['code'])) {
            $data = array(
                'code' => $this->token['code'],
                'subject' => ucwords(str_replace('_', ' ', $this->token['error'])),
                'message' => $this->token['error_description'],
            );
            return $data;
        }
        if (is_null($this->token)) {
            $data = array(
                'code' => '38188',
                'subject' => 'Nulled Token',
                'message' => 'The Token Information is Empty!',
            );
            return $data;
        }
        $headers = [
            "Access-Control-Allow-Origin: *",
            "Content-Type: application/json",
            "Ama-Client-Ref: " . $this->post_data['referenceTrackingID'],
            "Authorization: Bearer " . $this->token,
        ];

        $flight_search_data = json_decode($this->helpers->proxy_request($this->end_pointv2 . 'shopping/flight-offers', json_encode($this->dynamic_search_data), 'POST', $headers), true);
        if (isset($flight_search_data['errors'][0]['title'])) {
            $flight_search_data = $flight_search_data['errors'][0];
            $data = array(
                'code' => $flight_search_data['code'],
                'subject' => ucwords(str_replace('_', ' ', $flight_search_data['title'])),
                'message' => $flight_search_data['detail'],
            );
            return $data;
        }

        /*
        |--------------------------------------------------------------------------
        | Format Amadeus Flight Offers Data
        |--------------------------------------------------------------------------
        |
        | Format the search array into smaller understandable categories as listed;
        | Meta -> count
        | Dictionaries -> Location, Aircraft, Currencies, Carrier
        | Data -> Source, Price, travelerPricings, ValidatingAirlineCodes, FareRules,
        | and Iteneraries
        |
         */
        $formatted_flight_search_data = [
            'meta' => isset($flight_search_data['meta']) ? $flight_search_data['meta'] : null,
            'dictionaries' => isset($flight_search_data['dictionaries']) ? $flight_search_data['dictionaries'] : null,
            'data' => [],
        ];

        // loop through "data" array key to format array structure
        if (isset($flight_search_data['data']) && !empty($flight_search_data['data'])) {
            foreach ($flight_search_data['data'] as $key => $value) {
                $object_array = $numberOfStops = $route_array = [];

                // build "travelerPricings" array key data structure
                foreach ($value['travelerPricings'] as $travelerKey => $travelerPricing) {
                    switch ($travelerPricing['travelerType']) {
                        case 'ADULT':
                            $adult = [
                                'currency' => $travelerPricing['price']['currency'],
                                'price' => $travelerPricing['price']['total'],
                                'base' => $travelerPricing['price']['base'],
                                'checkedBags' => isset($travelerPricing['fareDetailsBySegment'][0]['includedCheckedBags']['quantity']) ? $travelerPricing['fareDetailsBySegment'][0]['includedCheckedBags']['quantity'] : null,
                                'cabin' => $travelerPricing['fareDetailsBySegment'][0]['cabin'],
                                'brandedFare' => isset($travelerPricing['fareDetailsBySegment'][0]['brandedFare']) ? $travelerPricing['fareDetailsBySegment'][0]['brandedFare'] : null,
                                'fareBasis' => $travelerPricing['fareDetailsBySegment'][0]['fareBasis'],
                                'numberOfPassengers' => $this->post_data['adults'],
                            ];
                            break;
                        case 'CHILD':
                            $child = [
                                'currency' => $travelerPricing['price']['currency'],
                                'price' => $travelerPricing['price']['total'],
                                'base' => $travelerPricing['price']['base'],
                                // 'checkedBags' => $travelerPricing['fareDetailsBySegment'][0]['includedCheckedBags']['quantity'],
                                'cabin' => $travelerPricing['fareDetailsBySegment'][0]['cabin'],
                                'brandedFare' => isset($travelerPricing['fareDetailsBySegment'][0]['brandedFare']) ? $travelerPricing['fareDetailsBySegment'][0]['brandedFare'] : null,
                                'fareBasis' => $travelerPricing['fareDetailsBySegment'][0]['fareBasis'],
                                'numberOfPassengers' => $this->post_data['children'],
                            ];
                            break;
                        case 'SEATED_INFANT':
                            $infant = [
                                'currency' => $travelerPricing['price']['currency'],
                                'price' => $travelerPricing['price']['total'],
                                'base' => $travelerPricing['price']['base'],
                                // 'checkedBags' => $travelerPricing['fareDetailsBySegment'][0]['includedCheckedBags']['quantity'],
                                'cabin' => $travelerPricing['fareDetailsBySegment'][0]['cabin'],
                                'brandedFare' => isset($travelerPricing['fareDetailsBySegment'][0]['brandedFare']) ? $travelerPricing['fareDetailsBySegment'][0]['brandedFare'] : null,
                                'fareBasis' => $travelerPricing['fareDetailsBySegment'][0]['fareBasis'],
                                'numberOfPassengers' => $this->post_data['infants'],
                            ];
                            break;
                    }
                }

                // loop through itineraries array key of Amadeus data to create itineraries array structure
                for ($i = 0; $i < count($value['itineraries']); $i++) {

                    // get number of stops count for a route
                    for ($j = 0; $j < count($value['itineraries'][$i]['segments']); $j++) {
                        switch ($this->post_data['type']) {
                            case 'one-way':
                            case 'round-trip':
                                $arrival = $i == 1 ? $this->post_data['origin'] : $this->post_data['destination'];
                                if (strtolower($value['itineraries'][$i]['segments'][$j]['arrival']['iataCode']) != strtolower($arrival)) {
                                    $value['itineraries'][$i]['segments'][$j]['numberOfStops'] = 1;
                                    $numberOfStops[] = 1;
                                }
                                break;
                            case 'multi-city':
                                if (strtolower($value['itineraries'][$i]['segments'][$j]['arrival']['iataCode']) != strtolower($this->post_data['destination'][$i])) {
                                    $value['itineraries'][$i]['segments'][$j]['numberOfStops'] = 1;
                                    $numberOfStops[] = 1;
                                }
                                break;
                        }
                        $value['itineraries'][$i]['segments'][$j]['departure']['time'] = date('h:iA', strtotime($value['itineraries'][$i]['segments'][$j]['departure']['at']));
                        $value['itineraries'][$i]['segments'][$j]['departure']['date'] = date('d M, Y', strtotime($value['itineraries'][$i]['segments'][$j]['departure']['at']));
                        $value['itineraries'][$i]['segments'][$j]['arrival']['time'] = date('h:iA', strtotime($value['itineraries'][$i]['segments'][$j]['arrival']['at']));
                        $value['itineraries'][$i]['segments'][$j]['arrival']['date'] = date('d M, Y', strtotime($value['itineraries'][$i]['segments'][$j]['arrival']['at']));
                    }

                    // build array for route in "itineraries" array key for data
                    if ($this->post_data['type'] == "one-way") {
                        $route = [
                            'type' => 'One-Way',
                            'img' => $value['itineraries'][$i]['segments'][0]['carrierCode'] . '.png',
                            'duration' => $value['itineraries'][$i]['duration'],
                            'route' => $value['itineraries'][$i]['segments'],
                        ];
                        array_push($route_array, $route);
                    } elseif ($this->post_data['type'] == "round-trip") {
                        $route = [
                            'type' => 'Round-Trip',
                            'img' => $value['itineraries'][$i]['segments'][0]['carrierCode'] . '.png',
                            'duration' => $value['itineraries'][$i]['duration'],
                            'route' => $value['itineraries'][$i]['segments'],
                        ];
                        array_push($route_array, $route);
                    } else {
                        $route = [
                            'type' => 'Multi-City',
                            'img' => $value['itineraries'][$i]['segments'][0]['carrierCode'] . '.png',
                            'duration' => $value['itineraries'][$i]['duration'],
                            'route' => $value['itineraries'][$i]['segments'],
                        ];
                        array_push($route_array, $route);
                    }
                }

                // build airline flight route
                $direction = '';
                switch ($this->post_data['type']) {
                    case 'one-way':
                        $direction = $this->post_data['origin'] . '-' . $this->post_data['destination'];
                        break;
                    case 'round-trip':
                        $direction = $this->post_data['origin'] . '-' . $this->post_data['destination'] . '-' . $this->post_data['origin'];
                        break;

                    default:
                        for ($d = 0; $d < count($this->post_data['origin']); $d++) {
                            if ($d == 0) {
                                $direction = $direction . $this->post_data['origin'][$d] . '-' . $this->post_data['destination'][$d];
                            } else {
                                $direction = $direction . '-' . $this->post_data['destination'][$d];
                            }
                        }
                        break;
                }

                // build final array for "data" array key
                $object_array = [
                    'source' => $value['source'],
                    'supplier' => 'Amadeus',
                    'referenceTrackingID' => $this->post_data['referenceTrackingID'],
                    'flightOfferRaw' => base64_encode(json_encode($value)),
                    'numberOfBookableSeats' => $value['numberOfBookableSeats'],
                    'TotalStops' => count($numberOfStops),
                    'flightDirection' => $direction,
                    'price' => [
                        'currency' => $value['price']['currency'],
                        'total' => $value['price']['total'],
                        'base' => $value['price']['base'],
                    ],
                    'travelerPricings' => [
                        'adult' => isset($adult) ? $adult : null,
                        'child' => isset($child) ? $child : null,
                        'infant' => isset($infant) ? $infant : null,
                    ],
                    'itineraries' => $route_array,
                    'validatingAirlineCodes' => $value['validatingAirlineCodes'],
                    'fareRules' => isset($value['fareRules']['rules']) ? $value['fareRules']['rules'] : null,
                ];
                array_push($formatted_flight_search_data['data'], $object_array);
            }
        }
        return $formatted_flight_search_data;
    }

    /*
    |--------------------------------------------------------------------------
    | Amadeus Flight Create Orders Parameter
    |--------------------------------------------------------------------------
    |
    | This function builds the parameters that would be passed to the Amadeus
    | API server.
    |
     */
    public function build_flight_create_parameter($post_data)
    {
        if (isset($post_data) && !empty($post_data)) {

            extract($post_data);
            unset($post_data);
            $this->flight_Offer_data = json_decode(base64_decode($flight_data, true));
            $travelers = array();

            if (isset($this->flight_Offer_data->referenceTrackingID)) {

                $this->referenceTrackingID = $this->flight_Offer_data->referenceTrackingID;
                unset($this->flight_Offer_data->referenceTrackingID);

                // loop thorugh "_post" data array to build "travelers" parameter structure
                for ($i = 0; $i < count($traveler_type); $i++) {
                    array_push($travelers, (object) array(
                        'id' => $i + 1,
                        'dateOfBirth' => date('Y-m-d', strtotime($dob[$i])),
                        'name' => (object) array(
                            'firstName' => $firstname[$i],
                            'lastName' => $lastname[$i],
                        ),
                        'gender' => strtoupper(strtolower($gender[$i])),
                        'contact' => (object) array(
                            'emailAddress' => $email,
                            'phones' => array(
                                (object) array(
                                    'deviceType' => 'MOBILE',
                                    'countryCallingCode' => $mcc,
                                    'number' => $mobile,
                                ),
                            ),
                        ),
                        'documents' => array(
                            (object) array(
                                'documentType' => 'PASSPORT',
                                'birthPlace' => $nationality[$i],
                                'issuanceLocation' => $nationality[$i],
                                'issuanceDate' => date('Y-m-d', strtotime($passport_issuance_date[$i])),
                                'number' => $passport_number[$i],
                                'expiryDate' => date('Y-m-d', strtotime($passport_expiry_date[$i])),
                                'issuanceCountry' => $nationality[$i],
                                'validityCountry' => $nationality[$i],
                                'nationality' => $nationality[$i],
                                'holder' => true,
                            ),
                        ),
                    ));
                }

                // build final parameter structure for booking
                $this->flight_booking_data = (object) array(
                    'data' => (object) array(
                        'type' => 'flight-order',
                        'flightOffers' => array(
                            json_decode(base64_decode($this->flight_Offer_data->flightOfferRaw, true)),
                        ),
                        'travelers' => $travelers,
                        'remarks' => (object) array(
                            'general' => array(
                                (object) array(
                                    'subType' => 'GENERAL_MISCELLANEOUS',
                                    'text' => 'Amadeus GDS Library Developed by Jencube',
                                ),
                            ),
                        ),
                        'ticketingAgreement' => (object) array(
                            'option' => 'CONFIRM',
                            'delay' => '6D',
                        ),
                        'contacts' => array(
                            (object) array(
                                'addresseeName' => (object) array(
                                    'firstName' => $fname,
                                    'lastName' => $lname,
                                ),
                                'companyName' => strtoupper(strtolower(substr($cname, 0, 20))),
                                'purpose' => 'STANDARD',
                                'phones' => array(
                                    (object) array(
                                        'deviceType' => 'LANDLINE',
                                        'countryCallingCode' => !isset($occ) || empty($occ) ? $mcc : $occ,
                                        'number' => !isset($office) || empty($office) ? $mobile : $office,
                                    ), (object) array(
                                        'deviceType' => 'MOBILE',
                                        'countryCallingCode' => $mcc,
                                        'number' => $mobile,
                                    ),
                                ),
                                'emailAddress' => $email,
                                'address' => (object) array(
                                    'lines' => array(
                                        $address,
                                    ),
                                    'postalCode' => '301001',
                                    'cityName' => 'Lagos',
                                    'countryCode' => $country,
                                ),
                            ),
                        ),
                    ),
                );
            } else {
                $this->referenceTrackingID = [];
            }
        } else {
            $this->referenceTrackingID = [];
        }
        return $this;
    }

    /*
    |--------------------------------------------------------------------------
    | Amadeus Flight Create Orders
    |--------------------------------------------------------------------------
    |
    | This function secures the booking process of the flight offer search
    | selected by the personnel trying to book a flight offer.
    |
     */
    public function get_flight_create_orders()
    {
        if (empty($this->referenceTrackingID) || !isset($this->referenceTrackingID)) {
            $data = array(
                'code' => '38180',
                'subject' => 'Missing Tracking ID',
                'message' => 'Reference Tracking ID is Missing!',
            );
            return $data;
        }
        if (isset($_SESSION['booking_successful']) && $this->referenceTrackingID == $_SESSION['booking_successful']) {
            $data = array(
                'code' => '419',
                'subject' => 'Duplicated Transaction',
                'message' => 'Reference ID already Exist!',
            );
            return $data;
        }
        if (isset($this->token['code'])) {
            $data = array(
                'code' => $this->token['code'],
                'subject' => ucwords(str_replace('_', ' ', $this->token['error'])),
                'message' => $this->token['error_description'],
            );
            return $data;
        }
        if (is_null($this->token)) {
            $data = array(
                'code' => '38188',
                'subject' => 'Nulled Token',
                'message' => 'The Token Information is Empty!',
            );
            return $data;
        }
        $headers = [
            "Access-Control-Allow-Origin: *",
            "Content-Type: application/json",
            "Ama-Client-Ref: " . $this->referenceTrackingID,
            "Authorization: Bearer " . $this->token,
        ];

        $flight_booking = json_decode($this->helpers->proxy_request($this->end_pointv1 . 'booking/flight-orders', json_encode($this->flight_booking_data), 'POST', $headers), true);
        if (isset($flight_booking['errors'][0]['title'])) {
            $flight_booking = $flight_booking['errors'][0];
            $data = array(
                'code' => $flight_booking['code'],
                'subject' => ucwords(str_replace('_', ' ', $flight_booking['title'])),
                'message' => $flight_booking['detail'],
            );
            return $data;
        }
        $flight_booking['referenceTrackingID'] = $this->referenceTrackingID;

        // generate booking success session
        $_SESSION['booking_successful'] = $this->referenceTrackingID;
        unset($this->referenceTrackingID);

        return $flight_booking;
    }

    /*
    |--------------------------------------------------------------------------
    | Build Commission Rate Parameter
    |--------------------------------------------------------------------------
    |
    | This function helps build the commission parameters that would be used
    | to create the flight ticket(s). it requires to parameters to function;
    | the Booking Response (gotten from successfully booking a flight offer with
    | PNR), and commission array (commission type and value) eg. ['percentage',9],
    | it can be either in Percentage or Amount.
    |
     */
    public function build_commission_rate_parameter($booking_response, $commision_array = ['amount', 165])
    {
        $this->commision_array = $commision_array;
        $this->booking_response = $booking_response;
        $this->commission_rate_query = array(
            "data" => array(
                "type" => "flight-order",
                "id" => $this->booking_response->data->id,
                "remarks" => array(
                    "general" => [
                        array(
                            "subType" => "GENERAL_MISCELLANEOUS",
                            "text" => "Amadeus GDS Library Developed by Jencube",
                        ),
                    ],
                ),
                "commissions" => [
                    array(
                        "controls" => ["MANUAL"],
                        "values" => [
                            array(
                                "commissionType" => "NEW",
                                $commision_array[0] => $commision_array[1],
                            ),
                        ],
                    ),
                ],
            ),
        );
        return $this;
    }

    /*
    |--------------------------------------------------------------------------
    | Amadeus Flight Eticket Issuance
    |--------------------------------------------------------------------------
    |
    | This function validates commission rate entries and issues E-ticket when
    | commission rate validation is successful.
    |
     */
    public function get_ticket_issuance()
    {
        if (empty($this->booking_response->referenceTrackingID) || !isset($this->booking_response->referenceTrackingID)) {
            $data = array(
                'code' => '38180',
                'subject' => 'Missing Tracking ID',
                'message' => 'Reference Tracking ID is Missing!',
            );
            return $data;
        }
        if (isset($this->token['code'])) {
            $data = array(
                'code' => $this->token['code'],
                'subject' => ucwords(str_replace('_', ' ', $this->token['error'])),
                'message' => $this->token['error_description'],
            );
            return $data;
        }
        if (is_null($this->token)) {
            $data = array(
                'code' => '38188',
                'subject' => 'Nulled Token',
                'message' => 'The Token Information is Empty!',
            );
            return $data;
        }
        $headers = [
            "Access-Control-Allow-Origin: *",
            "Content-Type: application/json",
            "Ama-Client-Ref: " . $this->booking_response->referenceTrackingID,
            "Authorization: Bearer " . $this->token,
        ];

        $commission_response = json_decode($this->helpers->proxy_request($this->end_pointv1 . 'booking/flight-orders/' . $this->booking_response->data->id, json_encode($this->commission_rate_query), 'PATCH', $headers), true);
        if (isset($commission_response['errors'][0]['title'])) {
            $commission_response = $commission_response['errors'][0];
            $data = array(
                'code' => $commission_response['code'],
                'subject' => ucwords(str_replace('_', ' ', $commission_response['title'])),
                'message' => isset($commission_response['detail']) ? $commission_response['detail'] : null,
            );
            return $data;
        }

        $issuance_response = json_decode($this->helpers->proxy_request($this->end_pointv1 . 'booking/flight-orders/' . $this->booking_response->data->id . '/issuance', '', 'POST', $headers), true);

        if (isset($issuance_response['errors'][0]['title'])) {
            $issuance_response = $issuance_response['errors'][0];
            $data = array(
                'code' => $issuance_response['code'],
                'subject' => ucwords(str_replace('_', ' ', $issuance_response['title'])),
                'message' => isset($issuance_response['detail']) ? $issuance_response['detail'] : null,
            );
            return $data;
        }

        return [
            'issuanceResponse' => $issuance_response,
            'commissionResponse' => $commission_response,
        ];
    }
}