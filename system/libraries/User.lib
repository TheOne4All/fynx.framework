<?php

/**
*
* PHP Class to help database manipulation. It can be used as a user class, login class etc.
*
* @version: 3.12.19
* @package Fynix Framework
* @author: Jencube Team
* @license: GNU General Public License (GPL) http://opensource.org/licenses/gpl-license.php
* @copyright: Copyright (c) 2013 - 2020 Jencube
* @supportfile(s): database.lib
* @twitter: @deusex0 & @One_Oracle
* @filesource system/database/user.lib
*
**/

class Users {

    /**
    *
    * User ID
    *
    * @access Private
    * @var Integer
    *
    **/
    private $_userID;

    /**
    *
    * User Session ID
    *
    * @access Private
    * @var String
    *
    **/
    private $_sessionID;

    /**
    *
    * User Data/Details
    *
    * @access Private
    * @var Array
    *
    **/
    private $_userData = array();

    /**
    *
    * Username
    *
    * @access Private
    * @var String
    *
    **/
    private $_username;

    /**
    *
    * User Password
    *
    * @access Private
    * @var String
    *
    **/
    private $_userPassword;

    /**
    *
    * User Password encrypted
    *
    * @access Private
    * @var String
    *
    **/
    private $_encryptedPassword;

    /**
    *
    * If logged in user is a Superuser
    *
    * @access Private
    * @var Bool
    *
    **/
    private $_is_superuser = FALSE;

    /**
    *
    * User previous logged in date and time
    *
    * @access Private
    * @var String
    *
    **/
    private $_lastLoginTime;

    /**
    *
    * Generated token
    *
    * @access Private
    * @var String
    *
    **/
    private $_token;

    /**
    *
    * Database Password**
    *
    * @access Private
    * @var String
    *
    **/
    private $_rememberMe;

    /**
    *
    * User IP Address
    *
    * @access Private
    * @var String
    *
    **/
    private $_ipAddress;

    /**
    *
    * Login
    *
    * @access public
    * @var String
    *
    **/
    public $redirectURL;

    /**
    *
    * Database Password
    *
    * @access Private
    * @var String
    *
    **/
    private $_loginAccess = FALSE;

    /**
    *
    * Database Password
    *
    * @access Private
    * @var String
    *
    **/
    private $_accessLevel;

    /**
    *
    * Database Password
    *
    * @access Private
    * @var Bool
    *
    **/
    private $_success = FALSE;

    /**
    *
    * Database Password
    *
    * @access Private
    * @var String
    *
    **/
    private $_is_online;

    /**
    *
    * Database Password
    *
    * @access Private
    * @var String
    *
    **/
    private $_tablePrefix;

    /**
    *
    * Database connection
    *
    * @access Protected
    * @var String | Array | Bool | Integer
    *
    **/
    protected $db;

    /**
    *
    * Database Password
    *
    * @access Private
    * @var String
    *
    **/
    private $_sessionName;

    /**
    *
    * Set if login details are posted
    *
    * @access Private
    * @var Bool
    *
    **/
    private $_posted = FALSE;

    /**
    *
    * Database Password
    *
    * @access Private
    * @var String
    *
    **/
    private $_cookieName;

    /**
    *
    * Database Password
    *
    * @access Private
    * @var String
    *
    **/
    private $_cookieTime;

    /**
    *
    * Database Password
    *
    * @access Private
    * @var String
    *
    **/
    private $_cookiePath;

    /**
    *
    * Database Password
    *
    * @access Public
    * @var Array
    *
    **/
    public $errors = array();

    /**
    *
    * Database Password
    *
    * @access Public
    * @var String
    *
    **/
    public $confirmation = NULL;


    /**
    *
    * Class constructor initialization to set the class
    * properties and connection to the database
    *
    * @access Public
    * @param Array
    *
    **/
    public function __construct( $data = NULL ) {

        $this->db = new Database( $config );
    }

    /**
    *
    * Close/kill the database connection and query results
    *
    * @access Public
    * @return Bool
    *
    **/
    public function set_data( $params ) {
        // Store posted data
        $this->__construct( $params );
    }


    /**
    *
    * Class constructor initialization to set the class
    * properties and connection to the database
    *
    * @access Public
    * @param Null
    *
    **/
    public function is_login() {
        $sessionID = $this->get_session($this->$_sessionName, 'sessionID' );
        if ( $this->get_session( $this->sessionName, 'superUser' ) == 1 )
            $this->_is_superuser = TRUE;

        return ( ! $this->_posted ) ? $this->_verify_session() : $this->verify_posted_data();
    }

    /**
    *
    * Class constructor initialization to set the class
    * properties and connection to the database
    *
    * @access Private
    * @return Bool
    * @param Null
    *
    **/
    private function _verify_session() {
        $this->_success = ( $this->session_exist() && $this->check_database() && $this->login_time() ) ? TRUE : FALSE;
        return $this->_success
    }

    /**
    *
    * Class constructor initialization to set the class
    * properties and connection to the database
    *
    * @access Private
    * @return Bool
    * @param Null
    *
    **/
    private function session_exist() {
        $session = $this->get_session( $this->$_sessionName );
        if ( ( isset( $session ) && ( $session != "" ) ) || $_COOKIE[$this->_cookieName] ) {
            if ( $this->load_user_data( $this->get_session( $this->$_sessionName, 'ID' ) ) )
                return TRUE;
        }
    }

    
    /**
    *
    * Class constructor initialization to set the class
    * properties and connection to the database
    *
    * @access Private
    * @return Bool
    * @param String $name -> Name of session
    * @param String $ID -> Session key
    *
    **/
    private function check_database() {
        if ( $this->get_session( $this->sessionName, 'superUser' ) == 1 )
            $this->_is_superuser = TRUE;
        
        if ( $this->_is_superuser ) {
            $query = $this->db->query("
                SELECT *
                FROM `" . $this->adminTableName . "`
                WHERE `user_session` = '" . $this->db->escape( $this->sessionID ) . "'
          ");
        }
    }

    /**
    *
    * Class constructor initialization to set the class
    * properties and connection to the database
    *
    * @access Private
    * @return Bool
    * @param String $name -> Name of session
    * @param String $ID -> Session key
    *
    **/
    public function load_user_data( $userID ) {

    }

    /**
    *
    * Class constructor initialization to set the class
    * properties and connection to the database
    *
    * @access Private
    * @return Bool
    * @param String $name -> Name of session
    * @param String $ID -> Session key
    *
    **/
    public function get_session( $name, $ID = NULL ) {
        if ( !isset( $_SESSION[$name] ) )
            @session_start();
        
        if ( empty( $ID) && !isset( $ID ) ) {
            return ( isset( $_SESSION[$name] ) )? $_SESSION[$name] : FALSE;
        } else {
            return ( isset( $_SESSION[$name][$ID] ) ) ? $_SESSION[$name][$ID] : FALSE;
        }
    }

    /**
    *
    * Class constructor initialization to set the class
    * properties and connection to the database
    *
    * @access Private
    * @return Bool
    * @param String $name -> Name of session
    * @param String $ID -> Session key
    *
    **/
    public function set_session( $name, $value = NULL, $ID = NULL ) {
        if ( !isset( $_SESSION[$name] ) )
            @session_start;
        
        // Update the current session id with a newly generated one
        $this->generate_session_id();

        return ( empty( $ID ) && !isset( $ID ) ) ? $_SESSION[$name] = $value : $_SESSION[$name][$ID] = $value;

    }

    /**
    *
    * Class constructor initialization to set the class
    * properties and connection to the database
    *
    * @access Private
    * @return Bool
    * @param String $name -> Session name
    * @param String $ID -> Session key
    *
    **/
    public function generate_session_id() {
        if ( !sset( $_SESSION[$name] ) )
            @session_start();
        
        @session_regenerate_id();
    }

    /**
    *
    * Store user information in session
    *
    * @access Public
    * @return Null
    * @param Array $sessionData -> Array of data to be stored in session
    * @param String $name -> Session name
    *
    **/
    public function register_session( $sessionData = array(), $name = NULL ) {
        if ( !sset( $_SESSION[$name] ) )
            @session_start();
        
        // Update the current session id with a newly generated one
        $this->generate_session_id();

        foreach( $sessionData as $key => $value ) {
            return ( empty( $name ) && !isset( $name ) ) ? $_SESSION[$key] = $value : $_SESSION[$name][$key] = $value;
        }
    }

    /**
    *
    * Destroy current or all user information in session
    *
    * @access Private
    * @return Null
    * @param Array $sessionData -> Array of data to be stored in session
    * @param String $name -> Session name
    *
    **/
    private function destory_session( $sessionData = array(), $name = NULL ) {
        if ( !isset( $_SESSION[$name] ) )
            @session_start();
        
        if ( is_array( $sessionData ) && count( $sessionData) > 0 ) {
            foreach ( $sessionData as $key ) {
                if ( empty( $name ) && !isset( $name ) ) {
                    unset($_SESSION[$key]);
                } else {
                    unset($_SESSION[$name][$key]);
                } 
            }
        } else {
            @session_unset();
            @session_destroy();
            $this->generate_session_id();
            @$_SESSION = array();
        }
    }

    /**
    *
    * Logout the current user
    *
    * @access Public
    * @return Boolean
    *
    **/
    public function logout(){

    }

    /**
    *
    * Destroy current or all user information in session
    *
    * @access Public
    * @return Boolean
    *
    **/
    public function logout_all(){
        
    }

    /**
    *
    * Destroy current or all user information in session
    *
    * @access Public
    * @return Boolean
    *
    **/
    public function logout_all_(){
        
    }



}

?>