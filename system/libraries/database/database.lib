<?php
    
/**
*
* This database class has a clean and common methods that works with various
* types of database (such as: msSQL, mySQL, mySQLi and postgres) and PDO. It
* has cache system integrated along side making it very effective and powerful
* database class..
*
* @version: 3.12.19
* @package Fynix Framework
* @author: Jencube Team
* @license: http://opensource.org/licenses/gpl-license.php
* GNU General Public License (GPL)
* @copyright: Copyright (c) 2013 - 2020 Jencube
* @twitter: @deusex0 & @One_Oracle
* @filesource system/database/database.lib
*
**/



class FynxDatabase {

    /**
    *
    * Database Type
    *
    * @access protected
    * @var string
    *
    **/
    //protected $ConnParameter;

    /**
    *
    * Database Host
    *
    * @access protected
    * @var string
    *
    **/
    //protected $dbHost;

    /**
    *
    * Database Name
    *
    * @access protected
    * @var string
    *
    **/
    //protected $dbName;

    /**
    *
    * Database User
    *
    * @access protected
    * @var string
    *
    **/
    //protected $dbUsername;

    /**
    *
    * Database Password
    *
    * @access protected
    * @var string
    *
    **/
    //protected $dbPassword;

    /**
    *
    * Database Port
    *
    * @access protected
    * @var integer
    *
    **/
    //protected $dbPort = 3306;

    /**
    *
    * To make a remote connection
    *
    * @access private
    * @var bool
    *
    **/
   // private $remote = FALSE;

    /**
    *
    * Database table columns charset
    *
    * @access public
    * @var string
    *
    **/
    //var $dbCharset = 'utf8';

    /**
    *
    * Database table columns collate
    *
    * @access public
    * @var string
    *
    **/
    //var $dbCollate = 'utf8_general_ci';

    /**
    *
    * Database Type
    *
    * @access private
    * @var string
    *
    **/
    private $_dbClassName;

    /**
    *
    * Database Type
    *
    * @access private
    * @var string
    *
    **/
    private $_dbType;

    /**
    *
    * To show database errors
    *
    * @access private
    * @var bool
    *
    **/
    private $showError = FALSE;

    /**
    *
    * SQL query
    *
    * @access private
    * @var string
    *
    **/
    private $sqlQuery = NULL;

    /**
    *
    * Query statement
    *
    * @access protected
    * @var mixed
    *
    **/
    protected $query = 0;

    /**
    *
    * Query fetch data
    *
    * @access protected
    * @var mixed
    *
    **/
    protected $queryResult = 0;

    /**
    *
    * Query time
    *
    * @access public
    * @var integer
    *
    **/
    public $queryTime = 0;

    /**
    *
    * Query count
    *
    * @access private
    * @var integer
    *
    **/
    var $numQueries = 0;

    /**
    *
    * Previous query row count
    *
    * @access public
    * @var integer
    *
    **/
    var $numRows = 0;

    /**
    *
    * Number of column in query result
    *
    * @access public
    * @var integer
    *
    **/
    var $numFields = 0;

    /**
    *
    * Count of affected rows by previous query
    *
    * @access public
    * @var integer
    *
    **/
    public $affectedRows = 0;

    /**
    *
    * Get row data affected by delete()
    *
    * @access public
    * @var object
    *
    **/
    public $affectedData = NULL;

    /**
    *
    * AUTO_INCREMENT generated ID by the previous query
    *
    * @access public
    * @var integer
    *
    **/
    var $insertID;

    /**
    *
    * Database connection link
    *
    * @access protected
    * @var integer
    *
    **/
    protected $connection;

    /**
    *
    * Use PHP Data Objects
    *
    * @access private
    * @var bool
    *
    **/
    //private $PDO = FALSE;

    /**
    *
    * The last error during query
    *
    * @access protected
    * @var array
    *
    **/
    protected $errorMsg = array();

    /**
    *
    * To suppress/show errors
    *
    * @access protected
    * @var bool
    *
    **/
    protected $suppressErrors = FALSE;

    /**
    *
    * Database activities log
    *
    * @access public
    * @var string
    *
    **/
    var $logData = '';

    /**
    *
    * Log data directory
    *
    * @access private
    * @var string
    *
    **/
    private $logDir;

    /**
    *
    * Cache results
    *
    * @access private
    * @var bool
    *
    **/
    private $cache = TRUE;

    /**
    *
    * Cache encode
    *
    * @access private
    * @var string
    *
    **/
    private $cacheEncode = 'jsone';

    /**
    *
    * Cache decode
    *
    * @access private
    * @var string
    *
    **/
    private $cacheDecode = 'jsond';

    /**
    *
    * Cache filename & directory
    *
    * @access private
    * @var string
    *
    **/
    private $cacheFile;

    /**
    *
    * Cache file directory
    *
    * @access private
    * @var string
    *
    **/
    private $cacheDir;

    /**
    *
    * Cache name
    *
    * @access public
    * @var string
    *
    **/
    var $cacheName = NULL;

    /**
    *
    * Cache Unique ID
    *
    * @access private
    * @var string
    *
    **/
    private $cacheID = NULL;

    /**
    *
    * Cache age, the period of time cache is allow
    * to exists. Default is 5min
    *
    * @access public
    * @var integer
    *
    **/
    var $cacheAge = 300;

    /**
    *
    * Cache file last modified time.
    *
    * @access private
    * @var integer
    *
    **/
    private $cacheMod;

    /**
    *
    * Activate/Deactivate debugging
    *
    * @access private
    * @var bool
    *
    **/
    private $debug = TRUE;

    /**
    *
    * debug details
    *
    * @access public
    * @var array
    *
    **/
    var $querydebug = array();

    /**
    *
    * debugging query counter
    *
    * @access public
    * @var integer
    *
    **/
    var $queryCount;

    /**
    *
    * debug start time
    *
    * @access public
    * @var integer
    *
    **/
    var $startTime = 0;

    /**
    *
    * Log every action
    *
    * @access public
    * @var string
    *
    **/
    private $_dbLibraryDir = 'database/';

    /**
    *
    * Log every action
    *
    * @access public
    * @var string
    *
    **/
    private $_dbFilename = 'mysqliDB';

    /**
    *
    * Log every action
    *
    * @access public
    * @var string
    *
    **/
    public $dbFileExt = '.lib';

    /**
    *
    * Log every action
    *
    * @access public
    * @var string
    *
    **/
    public $fileDirectory = NULL;

    /**
    *
    * Log every action
    *
    * @access public
    * @var string
    *
    **/
    private $config;

    /**
    *
    * Class constructor initialization to set the class
    * properties and connection to the database
    *
    * @access public
    * @param array
    *
    **/

    public function __construct( $config = array() ) {
      $this->_dbLibraryDir  = ( isset( $config['db_library_directory'] ) ) ?   $config['db_library_directory'] :   $this->_dbLibraryDir;
      $this->_dbFilename    = ( isset( $config['db_filename'] ) )          ?   $config['db_filename']          :   $this->_dbFilename;
      $this->dbFileExt      = ( isset( $config['db_file_extension'] ) )    ?   $config['db_file_extension']    :   $this->dbFileExt;
      $this->fileDirectory  = ( isset( $config['db_file_directory'] ) )    ?   $config['db_file_directory']    :   $this->fileDirectory;
      $this->_dbClassName   = ( isset( $config['db_class_name'] ) )        ?   $config['db_class_name']        :   $this->_dbClassName;     
      if ( empty( $this->fileDirectory ) ) {
        //$this->fileDirectory = dirname(__FILE__) . '/' . $this->_dbLibraryDir . $this->_dbFilename . $this->dbFileExt;
        //$this->fileDirectory .= $this->_dbLibraryDir . $this->_dbFilename . $this->dbFileExt;
        //$this->fileDirectory .= dirname(__FILE__) . '/' . $this->_dbLibraryDir . $this->_dbFilename . $this->dbFileExt;
        //$this->fileDirectory .= dirname(__FILE__) . '/' . $this->_dbLibraryDir . $this->_dbFilename . $this->dbFileExt;
        $this->fileDirectory = $this->_set_directory();
      } else {
        $this->fileDirectory;
      }
      //var_dump($this->_dbClassName);
     
      //var_dump(file_exists($config['db_file_directory']));
      include $this->fileDirectory;
      $this->db = new $this->_dbClassName( $config );
      //var_dump( $this->db->is_connected() );
        
    }

    public function display_result() {
      echo $this->fileDirectory;
    }

    /**
    *
    * Change/Select default database for the connection
    *
    * @access Public
    * @return Bool
    * @param String $dbName -> The database name
    *
    **/
    public function select_db( $dbName = NULL ) {
      return $this->db->select_db( $dbName );
      //var_dump( $this->db->DBErrorMsg );
     // var_dump( $return );
    }

    /**
    *
    * Perform a database query
    *
    * @access Public
    * @return Bool | Integer | Object
    * @param string $SQL -> Database query
    *
    **/
    public function query( $SQL = NULL ) {
      return $this->db->query( $SQL );
    }

    /**
    *
    * Set database query string
    *
    * @access Public
    * @param string $SQL -> Database SQL query
    *
    **/
    public function set_query_string( $SQL ) {
      $this->db->set_query_String( $SQL );
    }

    
    /**
    *
    * Return query string
    *
    * @access Public
    * @return Bool | String
    *
    **/
    public function get_query_string() {
      return $this->db->get_query_String();
    }  

    /**
    *
    * Set fetch result type
    *
    * @access Public
    * @param string $resultType -> Type of Array (i.e. MYSQLI_ASSOC, MYSQLI_NUM, or MYSQLI_BOTH )
    *
    **/
    public function set_fetch_result_type( $resultType ) {
      $this->db->_resultType = $resultType;
    }

    /**
    *
    * Sets the default scharacter set
    *
    * @access Public
    * @return Bool
    * @param String $charset -> Character set name (optional)
    * @param String $collate -> Character Collation name (optional)
    *
    **/
    public function set_charset( $charset = NULL, $collate = NULL ) {
      return $this->db->set_charset( $charset, $collate );
    }

    /**
    *
    * Returns a character set object
    *
    * @access Public
    * @return Bool | Object
    * @param String $charset -> Character set name (optional)
    *
    **/
    public function get_charset( $charset = NULL ) {
      return $this->db->get_charset( $charset );
    }

    /**
    *
    * Return random result
    * Contributed by akinas.com => mysql_random_row
    *
    * @access Public
    * @return String
    * @param Array $data -> Query details
    * @usage rand_query(
    *           array(
    *                 tablename => 'NOT NULL',
    *                 fieldid => 'id',
    *                 fields => '*',
    *                 limit => '0, 30',
    *                 where => '`name` = 'james' AND `privilege` = 'user'',
    *                 type => '0'
    *           )
    * )
    *
    **/
    private function sql_bind( $SQL = array() ) {
      if ( ! is_array( $SQL ) ) {
        // error message
        return FALSE;
      }

      $syntax = '';

      if ( ! isset( $SQL['action'] ) || empty( $SQL['action'] ) ) {
        // error message
        return FALSE;
      }

      switch ( strtoupper( $SQL['action'] ) ) {
        case "SELECT":
          $selectFields = isset( $SQL['column_name'] ) ? $SQL['column_name'] : "*";
          $syntax = "SELECT ". $selectFields;
          $syntax .= " FROM ". $SQL['t'];
          if ( isset( $SQL['where'] ) && empty( $SQL['where'] ) ) {
            $syntax .= " WHERE ";
          }
          $syntax .= "";
        case "CREATE":
        
        case "UPDATE":
        case "DELETE":
        case "INSERT":        
        case "DROP":        
        case "ALTER":

        }


    }

    public function escape( $input ) {
      return $this->database->escape( $input );
    }

    /**
    *
    * Return random result
    * Contributed by akinas.com => mysql_random_row
    *
    * @access Public
    * @return String
    * @param Array $data -> Query details
    * @usage rand_query(
    *           array(
    *                 tablename => 'NOT NULL',
    *                 fieldid => 'id',
    *                 fields => '*',
    *                 limit => '0, 30',
    *                 where => '`name` = 'james' AND `privilege` = 'user'',
    *                 type => '0'
    *           )
    * )
    *
    **/
    public function fetch_rand_query( $data = array() ) {
      if ( ! is_array( $data ) ) {
        // echo error method variable need to be an array
        return FALSE;
      }

      switch ( $data['type'] ) {

      }
    }

    /**
    *
    * Get results rows using any of the database fetch methods
    *
    * @access Public
    * @return Bool | Array | Object
    * @param String | array | Integer $option -> Fetch type ie: [0]object/obj | [1]array | [2]row | [3]assoc | [4]field
    *
    **/
    public function fetch( $option = NULL ) {
      if ( isset( $option['SQL'] ) ) {
        $this->set_query_string( $option['SQL'] );
        $this->query();
      }

      if ( isset( $option['fetch'] ) )
        $option = $option['fetch'];
      echo $option;
        return $this->db->fetch( $option );
    }

    /**
    *
    * Get number of rows in query result
    *
    * @access Public
    * @return Bool | Integer
    *
    **/
    public function record_count() {
      return $this->db->numRows;
    }

    /**
    *
    * Return number of fields in query result
    *
    * @access Public
    * @return Bool | Integer
    *
    **/
    public function record_fields() {
      return $this->db->numFields;
    }

    /**
    *
    * Return number of rows affected by the last query (INSERT, UPDATE, REPLACE or DELETE)
    *
    * @access Public
    * @return Bool | Integer
    *
    **/
    public function affected_rows() {
      return $this->db->affected_row();      
    }

    /**
    *
    * Return the ID generated in the last query
    *
    * @access Public
    * @return Bool | Integer | String
    *
    **/
    public function insert_id() {
      return $this->db->insert_id();
    }

    /**
    *
    * Escapes special characters in a string for use in an SQL statement
    *
    * @access public
    * @return String | Bool
    * @param String | Array $input -> The string that is to be escaped
    *
    **/
    public function clean( $input ) {
      return $this->db->escape( $input );
    }

    // remove and use as special function
    public function replace_special_character($string, $specialChar = array()) {
      if ( ! isset( $specialChar ) || empty( $specialChar ) ) {
        $specialChar = array(
          ' ' => '-', '!' => '', '"' => '', '#' => '', '$' => '', '%' => '',
          '&amp;' => '', '\'' => '', '(' => '', ')' => '', '*' => '', '+' => '',
          ',' => '', '₹' => '', '.' => '', '/-' => '', ':' => '', ';' => '',
          '<' => '', '=' => '', '>' => '', '?' => '', '@' => '', '[' => '',
          '\\' => '',   ']' => '', '^' => '', '_' => '', '`' => '', '{' => '',
          '|' => '', '}' => '', '~' => '', '-----' => '-', '----' => '-', '---' => '-',
          '/' => '', '--' => '-', '/_' => '-', '&' => ''
        );
      }

      foreach ( $specialChar as $needle => $replace ) {
        $string = str_replace( $needle, $replace, $string);
      }
      return $string;
    }

    private function _set_directory() {
      $specialChar = array( ' ' => '', '/' => '', '.' => '');
      if ( empty( $this->fileDirectory ) ) {
        $fileDirectory = dirname(__FILE__) . '/';
        $fileDirectory .= $this->replace_special_character( $this->_dbLibraryDir, $specialChar ) . '/';
        $fileDirectory .= $this->replace_special_character( $this->_dbFilename, $specialChar ) . '.';
        $fileDirectory .= $this->replace_special_character( $this->dbFileExt, $specialChar );
      }

      //if 

      return $fileDirectory;
    }

    private function _check_directory() {

    }

    // private function free_memory() {}

    public function _sql_error() {
      return $this->db->DBErrorMsg;
    }

    /**
    *
    * Through database class errors message
    *
    * @access public
    * @return string | bool
    *
    **/        
    public function errors() {
        if ( $this->suppressErrors )
            return FALSE;
        
        foreach ( $this->errorMsg as $key => $value )
            return $value; 
    }

    /**
    *
    * Delete record from database table
    *
    * @access private
    * @return bool | Integer
    * @param string $tableName -> Name of database table
    * @param array | string $identifier -> Query identifier
    *
    **/
    private function set_log_string( $string, $type = 'log' ) {
        if ( is_null( $type) )
          $type = 'error';
  
        $dateTime = date( 'DD-MM-YYYY h:i:s' );
        $logString = '';
        switch ( strtolower( $type ) ) {
          case 'error':
          case 'query':
            $logString = ucwords( $type) . ': <em>' . $string . '</em>';
            break;
          case 'log':
            $logString = $string;
            break;
          default:
            $logString = $string;
            break;
        }
        return $dateTime . ' ' .$logString . '<br />';
  
    }

}

error_reporting(E_ALL | E_WARNING | E_NOTICE);
ini_set('display_errors', TRUE);

$sysConfigDir = '../../configs/system.cfg';

//if ( file_exists( $sysConfigDir ) ) {
  //echo "Yes";
  //$sysConfig = require($sysConfigDir);
//}
$sysConfig = include($sysConfigDir);
$fynxDatabase = new FynxDatabase($sysConfig['connections'][$sysConfig['default_db']]);



?>